#!/usr/bin/env node
"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
require('commander')
    .version(require('../package').version);
require("reflect-metadata");
var colors = require("colors-console");
// const colors = require('colors-console')
// import program from "commander" ;
var typeorm_1 = require("typeorm");
var fs = require("fs");
var swig = require("swig-templates");
var mkdirp = require("mkdirp");
var beautify = require('js-beautify').js;
var beautifyConfig = {
    "indent_size": "4",
    "indent_char": " ",
    "max_preserve_newlines": "-1",
    "preserve_newlines": false,
    "keep_array_indentation": false,
    "break_chained_methods": false,
    "indent_scripts": "normal",
    "brace_style": "none,preserve-inline",
    "space_before_conditional": true,
    "unescape_strings": false,
    "jslint_happy": false,
    "end_with_newline": false,
    "wrap_line_length": "0",
    "indent_inner_html": false,
    "comma_first": false,
    "e4x": false,
    "indent_empty_lines": false
};
var path = require("path");
var inquirer = require('inquirer');
var ormEntityTemplateSrc = '';
if (fs.existsSync(process.cwd() + '/ormEntityTemplate.ejs')) { //如果使用了自定义的模板
    ormEntityTemplateSrc = process.cwd() + '/ormEntityTemplate.ejs';
}
else {
    ormEntityTemplateSrc = path.join(__dirname, '..', './ormEntityTemplate.ejs');
}
var template = swig.compileFile(ormEntityTemplateSrc);
var ormConfig = JSON.parse(fs.readFileSync(process.cwd() + '/ormconfig.json', 'UTF-8'));
delete ormConfig.entities;
delete ormConfig.migrations;
delete ormConfig.subscribers;
var TIME = Date.now();
/**
 * 将下划线命名转换为驼峰命名
 * @description 'order_name' => 'orderName'
 * @param {string} string
 */
var camelCase = function (string) {
    return string.replace(/_([a-z])/g, function (all, letter) {
        return letter.toUpperCase();
    });
};
/**
 *获取实体类对应的ClassName
 *
 * @param {*} name
 * @returns
 */
var databaseTableNameToEntityClassName = function (name) {
    var arr = name.split('-');
    var str = camelCase(arr[arr.length - 1]);
    return str[0].toUpperCase() + str.substring(1);
};
/**
 *将数据库中的表名生成对应的路径
 *
 * @param {*} name
 * @returns
 */
var databaseTableToEntityClassPathName = function (name) {
    var arr = name.split('-');
    var path = '';
    if (arr.length > 1) { //如果使用了模块命名
        arr.pop();
        path = arr.join('/');
    }
    return path;
};
/**
 *将数据库的column修改后返回一个新的columns
 *将数据库中的下划线命名的字段改为驼峰命名
 *将数据库中的所有类型分为 number 或者 string 类型
 *
 * @param {databaseTableColumn[]} columns
 * @returns {databaseTableColumn[]}
 */
var databaseColumnToEntityColumnUpdate = function (columns) {
    var newColumns = [];
    columns.forEach(function (d) {
        var arr = d.databaseColumnType.match(/\d+/gi);
        d.columnName = camelCase(d.databaseColumnName);
        d.type = d.type == 'int' ? 'number' : 'string';
        if (d.columnName !== 'id') {
            newColumns.push(d);
        }
        if (arr && arr.length) {
            d.databaseColumnTypeLength = arr[0];
        }
    });
    return newColumns;
};
/**
 *判断数据库的字段是否包含  createTime 和 updateTime 这两个字段
 *
 * @param {databaseTableColumn[]} columns
 * @returns {{hasDatabaseColumnUpdateTime:boolean,hasDatabaseColumnCreateTime:boolean}}
 */
var getDatabaseHasUpdateTimeAndCreateTime = function (columns) {
    var obj = {
        hasDatabaseColumnUpdateTime: false,
        hasDatabaseColumnCreateTime: false
    };
    columns.forEach(function (d) {
        if (d.columnName == 'updateTime') {
            obj.hasDatabaseColumnUpdateTime = true;
        }
        if (d.columnName == 'createTime') {
            obj.hasDatabaseColumnCreateTime = true;
        }
    });
    return obj;
};
/**
 *检查文件是否和上一次的版本不一样, 如果不一样则备份到
 *
 * @param {string} outJs
 * @param {string} outPath
 * @param {*} outFileName
 */
var checkFileDifferent = function (outJs, outPath, outFileName) {
    var outFileNamePath = outPath + '/' + outFileName;
    if (fs.existsSync(outFileNamePath)) { //如果已经存在这个文件了
        var _outJs_1 = fs.readFileSync(outFileNamePath, 'UTF-8');
        if (_outJs_1.replace(/Date.+/gi, '') !== outJs.replace(/Date.+/gi, '')) { //如果这次和上次的不一样，把上一次的拷贝过去。
            mkdirp(process.cwd() + '/dist/backup-typeorm-cli/', function (err) {
                if (err) {
                    console.error(err);
                }
                else {
                    fs.writeFileSync(process.cwd() + '/dist/backup-typeorm-cli/' + outFileName, _outJs_1);
                    console.log(colors('yellow', "\u3010" + outFileName + "\u3011\u548C\u4E0A\u4E00\u6B21\u7684\u7248\u672C\u4E0D\u4E00\u6837\uFF0C\u5DF2\u5907\u4EFD\u5230/dist/backup-typeorm-cli\u6587\u4EF6\u5939\u4E2D"));
                }
            });
        }
    }
};
/**
 *初始化函数
 *
 */
var initTypeormCli = function () { return __awaiter(_this, void 0, void 0, function () {
    var rest;
    var _this = this;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, inquirer.prompt([
                    {
                        type: 'confirm',
                        name: 'cli',
                        message: '如果生产的实体类，有过重新修改，新生成的会覆盖之前生成的,是否继续',
                        default: true
                    }
                ])];
            case 1:
                rest = _a.sent();
                if (rest.cli) {
                    typeorm_1.createConnection(ormConfig).then(function (connection) { return __awaiter(_this, void 0, void 0, function () {
                        var databaseTableNames;
                        var _this = this;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, connection.manager
                                        .query("select table_name as databaseTableName,table_comment as tableComment from information_schema.tables where table_schema='" + ormConfig.database + "' and table_type='base table'")];
                                case 1:
                                    databaseTableNames = _a.sent();
                                    console.log(colors('yellow', '数据库已连接成功。'));
                                    console.log(colors('yellow', '数据库中生成的实体类，会覆盖到现有的实体类中，如果有上次的版本和这次的版本不同，会做一次备份处理，是否继续'));
                                    databaseTableNames.forEach(function (table, index) { return __awaiter(_this, void 0, void 0, function () {
                                        var databaseTableName, outJs, outPath, outFileName, columns;
                                        return __generator(this, function (_a) {
                                            switch (_a.label) {
                                                case 0:
                                                    databaseTableName = table.databaseTableName;
                                                    outJs = '';
                                                    outPath = process.cwd() + '/' + ormConfig.cli.entitiesDir + '/' + databaseTableToEntityClassPathName(databaseTableName);
                                                    outFileName = databaseTableNameToEntityClassName(databaseTableName) + '.ts';
                                                    return [4 /*yield*/, connection.manager
                                                            .query("\n            select  column_name as databaseColumnName, column_comment as databaseComment,data_type as type ,IS_NULLABLE as databaseIsNull,COLUMN_TYPE as databaseColumnType from information_schema.columns\n            where table_schema ='" + ormConfig.database + "'  and table_name = '" + databaseTableName + "'       \n          ")];
                                                case 1:
                                                    columns = _a.sent();
                                                    columns = databaseColumnToEntityColumnUpdate(columns);
                                                    outJs = template(__assign({ entityClassName: databaseTableNameToEntityClassName(databaseTableName), tableComment: table.tableComment, date: new Date().toLocaleString(), author: ormConfig.author, databaseTableName: databaseTableName,
                                                        columns: columns, addClassValidate: ormConfig.addClassValidate }, getDatabaseHasUpdateTimeAndCreateTime(columns)));
                                                    outJs = beautify(outJs, beautifyConfig); //格式化生成的代码 
                                                    mkdirp(outPath, function (err) {
                                                        if (err) {
                                                            console.error(err);
                                                        }
                                                        else {
                                                            checkFileDifferent(outJs, outPath, outFileName);
                                                            fs.writeFileSync(outPath + '/' + outFileName, outJs);
                                                            console.log("\u6570\u636E\u5E93\u3010" + ormConfig.database + "\u3011\u4E2D\u7684\u8868\u3010" + databaseTableName + "\u3011\u5DF2\u751F\u6210");
                                                            if (index == databaseTableNames.length - 1) {
                                                                connection.close();
                                                                setTimeout(function () {
                                                                    var time = (Date.now() - TIME) / 1000;
                                                                    console.log(colors('cyan', "\u4E00\u5171\u521B\u5EFA\u4E86\u3010" + databaseTableNames.length + "\u3011\u5F20\u8868\u5BF9\u5E94\u7684\u5B9E\u4F53\u7C7B\uFF0C\u4E00\u5171\u7528\u65F6\u3010" + time + "\u3011\u79D2"));
                                                                }, 20);
                                                            }
                                                        }
                                                    });
                                                    return [2 /*return*/];
                                            }
                                        });
                                    }); });
                                    console.log('数据库表连接成功。。。。正在创建 entity');
                                    return [2 /*return*/];
                            }
                        });
                    }); }).catch(function (error) {
                        console.log(colors('red', "\u7A0B\u5E8F\u62A5\u9519\u4E86\u3002\u3002\u3002\u3002"));
                        console.log(error);
                    });
                }
                return [2 /*return*/];
        }
    });
}); };
initTypeormCli();
// program
//   .version('0.1.0')
//   .option('-p, --peppers', 'Add peppers')
//   .option('-P, --pineapple', 'Add pineapple')
//   .option('-b, --bbq-sauce', 'Add bbq sauce')
//   .option('-c, --cheese [type]', 'Add the specified type of cheese [marble]', 'marble')
//   .parse(process.argv);
// console.log('you ordered a pizza with:');
// if (program.peppers) console.log('  - peppers ================');
// if (program.pineapple) console.log('  - pineapple');
// if (program.bbqSauce) console.log('  - bbq');
// console.log('  - %s cheese', program.cheese);
//# sourceMappingURL=cli.js.map